#include <WiFi.h>

// SSID & Password
const char* ssid = "Fido#30";  // Enter your SSID here
const char* password = "Dgssp@54";  //Enter your Password here

WiFiServer server(80);  // Object of WebServer(HTTP port, 80 is defult)
String header;
// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;        
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  
  Serial.begin(115200);
  Serial.println("Connecting to ");
  Serial.println(ssid);

  // Connect to your wi-fi modem
  WiFi.begin(ssid, password);

  // Check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
  delay(500);
  Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected successfully");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //Show ESP32 IP on serial

  server.begin();
}

void loop(){
  WiFiClient client = server.available();   // Listen for incoming clients
  if (client) 
  {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) 
    {
      currentTime = millis();
      // loop while the client's connected
      if (client.available()) 
      {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') 
        {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) 
          {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Display the HTML web page
client.print("<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\
                <title>Door Security</title>\
                <style>\
                body {background-color: powderblue;}\
                h1{color: Dodgerblue; font-family: verdana;\
                  font-size: 300%;\
                  text-align: center;}\
               table, th, td {border: 1px solid black;}\
                table.center {\
                  margin-left: auto;\ 
                  margin-right: auto;\
                }\
                .button {\
                  background-color: #4CAF50;\
                  border: none;\
                  color: white;\
                  padding: 15px 32px;\
                  text-align: center;\
                  text-decoration: none;\
                  display: inline-block;\
                  font-size: 16px;\
                  margin: 4px 2px;\
                  cursor: pointer;\
                }\
                .button1 {\
                  background-color: #e01f09;\ 
                  border: none;\
                  color: white;\
                  padding: 15px 32px;\
                  text-align: center;\
                  text-decoration: none;\
                  display: inline-block;\
                  font-size: 16px;\
                  margin: 4px 2px;\
                  cursor: pointer;\
                }\
                .button2 {\
                  background-color: #098072;\ 
                  border: none;\
                  color: white;\
                  padding: 15px 32px;\
                  text-align: center;\
                  text-decoration: none;\
                  display: inline-block;\
                  font-size: 16px;\
                  margin: 4px 2px;\
                  cursor: pointer;\
                }\
                .hero-image {\
                  background-image: url(\"door.jpg\");\
                  background-color: #cccccc;\
                  height: 400px;\
                  background-position: center;\
                  background-repeat: no-repeat;\
                  background-size: cover;\
                  position: relative;\
                }\
                .hero-text {\
                  text-align: center;\
                  position: absolute;\
                  top: 50%;\
                  left: 50%;\
                  transform: translate(-50%, -50%);\
                  color: white;\
                }\
                </style>\
                </head>\
                <body>\
                <div class=\"hero-image\">\
                  <div class=\"hero-text\">\
                <h1>Welcome to Garage Door Montioring System</h1>\
                </div>\
                </div>\
                <p><hr></p>\
                <table class=\"center\">\
                  <tr>\
                    <td>\
                    <h3 style=\"color:black;\">Garage Status</h3>\
                    </td>\
                    <td>Occupied</td>\
                  </tr>\
                  <tr>\
                    <td>Door is Open</td>\
                    <td>\
                    <button class=\"button button1\">CLOSE</button>\
                    </td>\
                  </tr>\
                </table>\
                <p><hr></p>\
                <button class=\"button button2\">REFRESH</button>\
</body>\
<html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else 
          { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') 
        {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
   header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}

